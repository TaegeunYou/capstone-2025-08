/* tslint:disable */
/* eslint-disable */
/**
 * Pathos
 * Pathos의 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 댓글 정보
 * @export
 * @interface CommentDto
 */
export interface CommentDto {
    /**
     * 댓글 ID
     * @type {number}
     * @memberof CommentDto
     */
    commentId?: number;
    /**
     * 작성자 이름
     * @type {string}
     * @memberof CommentDto
     */
    authorName?: string;
    /**
     * 댓글 내용
     * @type {string}
     * @memberof CommentDto
     */
    content?: string;
    /**
     * 댓글 태그
     * @type {string}
     * @memberof CommentDto
     */
    commentTag?: CommentDtoCommentTagEnum;
    /**
     * 작성 시간
     * @type {Date}
     * @memberof CommentDto
     */
    createdAt?: Date;
    /**
     * 대댓글 리스트
     * @type {Array<CommentDto>}
     * @memberof CommentDto
     */
    replies?: Array<CommentDto>;
}


/**
 * @export
 */
export const CommentDtoCommentTagEnum = {
    Comment: 'COMMENT',
    Tag: 'TAG'
} as const;
export type CommentDtoCommentTagEnum = typeof CommentDtoCommentTagEnum[keyof typeof CommentDtoCommentTagEnum];


/**
 * Check if a given object implements the CommentDto interface.
 */
export function instanceOfCommentDto(value: object): value is CommentDto {
    return true;
}

export function CommentDtoFromJSON(json: any): CommentDto {
    return CommentDtoFromJSONTyped(json, false);
}

export function CommentDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentDto {
    if (json == null) {
        return json;
    }
    return {
        
        'commentId': json['commentId'] == null ? undefined : json['commentId'],
        'authorName': json['authorName'] == null ? undefined : json['authorName'],
        'content': json['content'] == null ? undefined : json['content'],
        'commentTag': json['commentTag'] == null ? undefined : json['commentTag'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'replies': json['replies'] == null ? undefined : ((json['replies'] as Array<any>).map(CommentDtoFromJSON)),
    };
}

export function CommentDtoToJSON(json: any): CommentDto {
    return CommentDtoToJSONTyped(json, false);
}

export function CommentDtoToJSONTyped(value?: CommentDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'commentId': value['commentId'],
        'authorName': value['authorName'],
        'content': value['content'],
        'commentTag': value['commentTag'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'replies': value['replies'] == null ? undefined : ((value['replies'] as Array<any>).map(CommentDtoToJSON)),
    };
}

