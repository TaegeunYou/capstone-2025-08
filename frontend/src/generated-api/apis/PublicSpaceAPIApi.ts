/* tslint:disable */
/* eslint-disable */
/**
 * PlanList API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateCommentRequestDto,
  CreateSharedProjectDto,
  GetProjectWithModelsResponseDto,
  GetSharedProjectCommentsResponseDto,
  GetSharedProjectDetailResponseDto,
  GetSharedProjectsResponseDto,
  UpdateCommentRequestDto,
} from '../models/index';
import {
  CreateCommentRequestDtoFromJSON,
  CreateCommentRequestDtoToJSON,
  CreateSharedProjectDtoFromJSON,
  CreateSharedProjectDtoToJSON,
  GetProjectWithModelsResponseDtoFromJSON,
  GetProjectWithModelsResponseDtoToJSON,
  GetSharedProjectCommentsResponseDtoFromJSON,
  GetSharedProjectCommentsResponseDtoToJSON,
  GetSharedProjectDetailResponseDtoFromJSON,
  GetSharedProjectDetailResponseDtoToJSON,
  GetSharedProjectsResponseDtoFromJSON,
  GetSharedProjectsResponseDtoToJSON,
  UpdateCommentRequestDtoFromJSON,
  UpdateCommentRequestDtoToJSON,
} from '../models/index';

export interface CreateCommentRequest {
  sharedProjectId: number;
  createCommentRequestDto: CreateCommentRequestDto;
}

export interface CreatePostRequest {
  requestDto: CreateSharedProjectDto;
  originalImages: Array<Blob>;
  resultImages: Array<Blob>;
}

export interface DeleteCommentRequest {
  sharedProjectId: number;
  commentId: number;
}

export interface DownloadModelRequest {
  sharedProjectId: number;
  modelId: number;
}

export interface GetCommentsRequest {
  sharedProjectId: number;
}

export interface GetSharedProjectRequest {
  sharedProjectId: number;
}

export interface GetSharedProjectsResponseDtoResponseEntityRequest {
  search?: string;
  page?: number;
}

export interface UpdateCommentRequest {
  sharedProjectId: number;
  commentId: number;
  updateCommentRequestDto: UpdateCommentRequestDto;
}

/**
 *
 */
export class PublicSpaceAPIApi extends runtime.BaseAPI {
  /**
   * 특정 공유 프로젝트에 댓글을 작성합니다.
   * 댓글 작성
   */
  async createCommentRaw(
    requestParameters: CreateCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['sharedProjectId'] == null) {
      throw new runtime.RequiredError(
        'sharedProjectId',
        'Required parameter "sharedProjectId" was null or undefined when calling createComment().',
      );
    }

    if (requestParameters['createCommentRequestDto'] == null) {
      throw new runtime.RequiredError(
        'createCommentRequestDto',
        'Required parameter "createCommentRequestDto" was null or undefined when calling createComment().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/public-space/shared-projects/{sharedProjectId}/comments`.replace(
          `{${'sharedProjectId'}}`,
          encodeURIComponent(String(requestParameters['sharedProjectId'])),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateCommentRequestDtoToJSON(
          requestParameters['createCommentRequestDto'],
        ),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 특정 공유 프로젝트에 댓글을 작성합니다.
   * 댓글 작성
   */
  async createComment(
    requestParameters: CreateCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.createCommentRaw(requestParameters, initOverrides);
  }

  /**
   * 공유 프로젝트를 업로드합니다.
   * 공유 프로젝트 생성
   */
  async createPostRaw(
    requestParameters: CreatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<number>> {
    if (requestParameters['requestDto'] == null) {
      throw new runtime.RequiredError(
        'requestDto',
        'Required parameter "requestDto" was null or undefined when calling createPost().',
      );
    }

    if (requestParameters['originalImages'] == null) {
      throw new runtime.RequiredError(
        'originalImages',
        'Required parameter "originalImages" was null or undefined when calling createPost().',
      );
    }

    if (requestParameters['resultImages'] == null) {
      throw new runtime.RequiredError(
        'resultImages',
        'Required parameter "resultImages" was null or undefined when calling createPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['requestDto'] != null) {
      formParams.append(
        'requestDto',
        new Blob([JSON.stringify(requestParameters['requestDto'])], {
          type: 'application/json',
        }),
      );
    }

    if (requestParameters['originalImages'] != null) {
      requestParameters['originalImages'].forEach((element) => {
        formParams.append('originalImages', element as any);
      });
    }

    if (requestParameters['resultImages'] != null) {
      requestParameters['resultImages'].forEach((element) => {
        formParams.append('resultImages', element as any);
      });
    }

    const response = await this.request(
      {
        path: `/api/public-space`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<number>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * 공유 프로젝트를 업로드합니다.
   * 공유 프로젝트 생성
   */
  async createPost(
    requestParameters: CreatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<number> {
    const response = await this.createPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 댓글을 소프트 삭제합니다. 실제로 DB에서 삭제되지는 않으며, 표시되지 않도록 처리됩니다.
   * 댓글 삭제
   */
  async deleteCommentRaw(
    requestParameters: DeleteCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['sharedProjectId'] == null) {
      throw new runtime.RequiredError(
        'sharedProjectId',
        'Required parameter "sharedProjectId" was null or undefined when calling deleteComment().',
      );
    }

    if (requestParameters['commentId'] == null) {
      throw new runtime.RequiredError(
        'commentId',
        'Required parameter "commentId" was null or undefined when calling deleteComment().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/public-space/shared-projects/{sharedProjectId}/comments/{commentId}`
          .replace(
            `{${'sharedProjectId'}}`,
            encodeURIComponent(String(requestParameters['sharedProjectId'])),
          )
          .replace(
            `{${'commentId'}}`,
            encodeURIComponent(String(requestParameters['commentId'])),
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 댓글을 소프트 삭제합니다. 실제로 DB에서 삭제되지는 않으며, 표시되지 않도록 처리됩니다.
   * 댓글 삭제
   */
  async deleteComment(
    requestParameters: DeleteCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteCommentRaw(requestParameters, initOverrides);
  }

  /**
   * 특정 공유 프로젝트에서 지정한 모델을 다운로드합니다.
   * 모델 다운로드
   */
  async downloadModelRaw(
    requestParameters: DownloadModelRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['sharedProjectId'] == null) {
      throw new runtime.RequiredError(
        'sharedProjectId',
        'Required parameter "sharedProjectId" was null or undefined when calling downloadModel().',
      );
    }

    if (requestParameters['modelId'] == null) {
      throw new runtime.RequiredError(
        'modelId',
        'Required parameter "modelId" was null or undefined when calling downloadModel().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/public-space/shared-projects/{sharedProjectId}/model-download/{modelId}`
          .replace(
            `{${'sharedProjectId'}}`,
            encodeURIComponent(String(requestParameters['sharedProjectId'])),
          )
          .replace(
            `{${'modelId'}}`,
            encodeURIComponent(String(requestParameters['modelId'])),
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 특정 공유 프로젝트에서 지정한 모델을 다운로드합니다.
   * 모델 다운로드
   */
  async downloadModel(
    requestParameters: DownloadModelRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.downloadModelRaw(requestParameters, initOverrides);
  }

  /**
   * 특정 공유 프로젝트의 댓글 목록을 조회합니다. 대댓글 포함 트리 구조로 반환됩니다.
   * 댓글 조회
   */
  async getCommentsRaw(
    requestParameters: GetCommentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSharedProjectCommentsResponseDto>> {
    if (requestParameters['sharedProjectId'] == null) {
      throw new runtime.RequiredError(
        'sharedProjectId',
        'Required parameter "sharedProjectId" was null or undefined when calling getComments().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/public-space/shared-projects/{sharedProjectId}/comments`.replace(
          `{${'sharedProjectId'}}`,
          encodeURIComponent(String(requestParameters['sharedProjectId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetSharedProjectCommentsResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 특정 공유 프로젝트의 댓글 목록을 조회합니다. 대댓글 포함 트리 구조로 반환됩니다.
   * 댓글 조회
   */
  async getComments(
    requestParameters: GetCommentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetSharedProjectCommentsResponseDto> {
    const response = await this.getCommentsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 공유 가능한 프로젝트와 해당 프로젝트의 학습 가능한 모델 목록을 조회합니다.
   * 프로젝트 목록 및 관련 모델 조회
   */
  async getProjectWithModelsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProjectWithModelsResponseDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/public-space/project-models`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProjectWithModelsResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 공유 가능한 프로젝트와 해당 프로젝트의 학습 가능한 모델 목록을 조회합니다.
   * 프로젝트 목록 및 관련 모델 조회
   */
  async getProjectWithModels(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProjectWithModelsResponseDto> {
    const response = await this.getProjectWithModelsRaw(initOverrides);
    return await response.value();
  }

  /**
   * 특정 공유 프로젝트의 상세 정보를 조회합니다.
   * 공유 프로젝트 상세 조회
   */
  async getSharedProjectRaw(
    requestParameters: GetSharedProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSharedProjectDetailResponseDto>> {
    if (requestParameters['sharedProjectId'] == null) {
      throw new runtime.RequiredError(
        'sharedProjectId',
        'Required parameter "sharedProjectId" was null or undefined when calling getSharedProject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/public-space/shared-projects/{sharedProjectId}`.replace(
          `{${'sharedProjectId'}}`,
          encodeURIComponent(String(requestParameters['sharedProjectId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetSharedProjectDetailResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 특정 공유 프로젝트의 상세 정보를 조회합니다.
   * 공유 프로젝트 상세 조회
   */
  async getSharedProject(
    requestParameters: GetSharedProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetSharedProjectDetailResponseDto> {
    const response = await this.getSharedProjectRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 검색어와 페이지 번호를 기반으로 공유 프로젝트 목록을 조회합니다.
   * 공유 프로젝트 목록 조회
   */
  async getSharedProjectsResponseDtoResponseEntityRaw(
    requestParameters: GetSharedProjectsResponseDtoResponseEntityRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSharedProjectsResponseDto>> {
    const queryParameters: any = {};

    if (requestParameters['search'] != null) {
      queryParameters['search'] = requestParameters['search'];
    }

    if (requestParameters['page'] != null) {
      queryParameters['page'] = requestParameters['page'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/public-space`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetSharedProjectsResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 검색어와 페이지 번호를 기반으로 공유 프로젝트 목록을 조회합니다.
   * 공유 프로젝트 목록 조회
   */
  async getSharedProjectsResponseDtoResponseEntity(
    requestParameters: GetSharedProjectsResponseDtoResponseEntityRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetSharedProjectsResponseDto> {
    const response = await this.getSharedProjectsResponseDtoResponseEntityRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 댓글 내용을 수정합니다. 본인 댓글만 수정할 수 있습니다.
   * 댓글 수정
   */
  async updateCommentRaw(
    requestParameters: UpdateCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['sharedProjectId'] == null) {
      throw new runtime.RequiredError(
        'sharedProjectId',
        'Required parameter "sharedProjectId" was null or undefined when calling updateComment().',
      );
    }

    if (requestParameters['commentId'] == null) {
      throw new runtime.RequiredError(
        'commentId',
        'Required parameter "commentId" was null or undefined when calling updateComment().',
      );
    }

    if (requestParameters['updateCommentRequestDto'] == null) {
      throw new runtime.RequiredError(
        'updateCommentRequestDto',
        'Required parameter "updateCommentRequestDto" was null or undefined when calling updateComment().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/public-space/shared-projects/{sharedProjectId}/comments/{commentId}`
          .replace(
            `{${'sharedProjectId'}}`,
            encodeURIComponent(String(requestParameters['sharedProjectId'])),
          )
          .replace(
            `{${'commentId'}}`,
            encodeURIComponent(String(requestParameters['commentId'])),
          ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateCommentRequestDtoToJSON(
          requestParameters['updateCommentRequestDto'],
        ),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 댓글 내용을 수정합니다. 본인 댓글만 수정할 수 있습니다.
   * 댓글 수정
   */
  async updateComment(
    requestParameters: UpdateCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateCommentRaw(requestParameters, initOverrides);
  }
}
