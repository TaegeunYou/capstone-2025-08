/* tslint:disable */
/* eslint-disable */
/**
 * Pathos
 * Pathos의 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RoiLabelSaveRequestDto,
} from '../models/index';
import {
    RoiLabelSaveRequestDtoFromJSON,
    RoiLabelSaveRequestDtoToJSON,
} from '../models/index';

export interface UploadRoisRequest {
    subProjectId: number;
    annotationHistoryId: number;
    requestDto: RoiLabelSaveRequestDto;
    images: Array<Blob>;
}

/**
 * 
 */
export class ROIAPIApi extends runtime.BaseAPI {

    /**
     * 특정 SubProject와 AnnotationHistory에 ROI, 관련 이미지, 라벨 정보를 업로드합니다.
     * ROI, 이미지, 라벨 업로드
     */
    async uploadRoisRaw(requestParameters: UploadRoisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['subProjectId'] == null) {
            throw new runtime.RequiredError(
                'subProjectId',
                'Required parameter "subProjectId" was null or undefined when calling uploadRois().'
            );
        }

        if (requestParameters['annotationHistoryId'] == null) {
            throw new runtime.RequiredError(
                'annotationHistoryId',
                'Required parameter "annotationHistoryId" was null or undefined when calling uploadRois().'
            );
        }

        if (requestParameters['requestDto'] == null) {
            throw new runtime.RequiredError(
                'requestDto',
                'Required parameter "requestDto" was null or undefined when calling uploadRois().'
            );
        }

        if (requestParameters['images'] == null) {
            throw new runtime.RequiredError(
                'images',
                'Required parameter "images" was null or undefined when calling uploadRois().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['requestDto'] != null) {
            formParams.append('requestDto', new Blob([JSON.stringify(ToJSON(requestParameters['requestDto']))], { type: "application/json", }));
                    }

        if (requestParameters['images'] != null) {
            requestParameters['images'].forEach((element) => {
                formParams.append('images', element as any);
            })
        }

        const response = await this.request({
            path: `/api/rois/sub-projects/{subProjectId}/histories/{annotationHistoryId}`.replace(`{${"subProjectId"}}`, encodeURIComponent(String(requestParameters['subProjectId']))).replace(`{${"annotationHistoryId"}}`, encodeURIComponent(String(requestParameters['annotationHistoryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 특정 SubProject와 AnnotationHistory에 ROI, 관련 이미지, 라벨 정보를 업로드합니다.
     * ROI, 이미지, 라벨 업로드
     */
    async uploadRois(requestParameters: UploadRoisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadRoisRaw(requestParameters, initOverrides);
    }

}
