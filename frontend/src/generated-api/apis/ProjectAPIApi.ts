/* tslint:disable */
/* eslint-disable */
/**
 * Pathos
 * Pathos의 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateProjectRequestDto,
  GetProjectDetailResponseDto,
  GetProjectsResponseDto,
  GetSubProjectResponseDto,
  UpdateProjectRequestDto,
} from '../models/index';
import {
  CreateProjectRequestDtoFromJSON,
  CreateProjectRequestDtoToJSON,
  GetProjectDetailResponseDtoFromJSON,
  GetProjectDetailResponseDtoToJSON,
  GetProjectsResponseDtoFromJSON,
  GetProjectsResponseDtoToJSON,
  GetSubProjectResponseDtoFromJSON,
  GetSubProjectResponseDtoToJSON,
  UpdateProjectRequestDtoFromJSON,
  UpdateProjectRequestDtoToJSON,
} from '../models/index';

export interface CreateProjectRequest {
  requestDto: CreateProjectRequestDto;
  files: Array<Blob>;
}

export interface DeleteProjectRequest {
  projectId: number;
}

export interface GetProjectDetailRequest {
  projectId: number;
}

export interface GetProjectsRequest {
  search?: string;
  sort?: string;
  page?: number;
}

export interface GetSubProject1Request {
  projectId: number;
}

export interface UpdateProjectRequest {
  projectId: number;
  updateProjectRequestDto: UpdateProjectRequestDto;
}

/**
 *
 */
export class ProjectAPIApi extends runtime.BaseAPI {
  /**
   * 프로젝트를 생성합니다.
   */
  async createProjectRaw(
    requestParameters: CreateProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['requestDto'] == null) {
      throw new runtime.RequiredError(
        'requestDto',
        'Required parameter "requestDto" was null or undefined when calling createProject().',
      );
    }

    if (requestParameters['files'] == null) {
      throw new runtime.RequiredError(
        'files',
        'Required parameter "files" was null or undefined when calling createProject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['requestDto'] != null) {
      formParams.append(
        'requestDto',
        new Blob([JSON.stringify(requestParameters['requestDto'])], {
          type: 'application/json',
        }),
      );
    }

    if (requestParameters['files'] != null) {
      requestParameters['files'].forEach((element) => {
        formParams.append('files', element as any);
      });
    }

    const response = await this.request(
      {
        path: `/api/projects`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 프로젝트를 생성합니다.
   */
  async createProject(
    requestParameters: CreateProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.createProjectRaw(requestParameters, initOverrides);
  }

  /**
   * 프로젝트를 삭제합니다.
   */
  async deleteProjectRaw(
    requestParameters: DeleteProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling deleteProject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/projects/{projectId}`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 프로젝트를 삭제합니다.
   */
  async deleteProject(
    requestParameters: DeleteProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteProjectRaw(requestParameters, initOverrides);
  }

  /**
   * 프로젝트 상세 화면을 조회합니다.
   */
  async getProjectDetailRaw(
    requestParameters: GetProjectDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProjectDetailResponseDto>> {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling getProjectDetail().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/projects/{projectId}`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProjectDetailResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 프로젝트 상세 화면을 조회합니다.
   */
  async getProjectDetail(
    requestParameters: GetProjectDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProjectDetailResponseDto> {
    const response = await this.getProjectDetailRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 프로젝트 목록을 조회합니다.
   */
  async getProjectsRaw(
    requestParameters: GetProjectsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProjectsResponseDto>> {
    const searchParams = new URLSearchParams();
    if (requestParameters['search'])
      searchParams.append('search', requestParameters['search']);
    if (requestParameters['sort'])
      searchParams.append('sort', requestParameters['sort']);
    if (requestParameters['page'] !== undefined)
      searchParams.append('page', requestParameters['page'].toString());

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/projects?${searchParams.toString().replace(/\+/g, '%20')}`,
        method: 'GET',
        headers: headerParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProjectsResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 프로젝트 목록을 조회합니다.
   */
  async getProjects(
    requestParameters: GetProjectsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProjectsResponseDto> {
    const response = await this.getProjectsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 해당 projectId를 기반으로 연결된 서브 프로젝트 정보를 반환합니다.
   * 서브 프로젝트를 조회합니다.
   */
  async getSubProject1Raw(
    requestParameters: GetSubProject1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSubProjectResponseDto>> {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling getSubProject1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/projects/annotation/{projectId}`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetSubProjectResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 해당 projectId를 기반으로 연결된 서브 프로젝트 정보를 반환합니다.
   * 서브 프로젝트를 조회합니다.
   */
  async getSubProject1(
    requestParameters: GetSubProject1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetSubProjectResponseDto> {
    const response = await this.getSubProject1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 프로젝트의 이름과 설명을 수정합니다.
   */
  async updateProjectRaw(
    requestParameters: UpdateProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling updateProject().',
      );
    }

    if (requestParameters['updateProjectRequestDto'] == null) {
      throw new runtime.RequiredError(
        'updateProjectRequestDto',
        'Required parameter "updateProjectRequestDto" was null or undefined when calling updateProject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/projects/{projectId}`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId'])),
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateProjectRequestDtoToJSON(
          requestParameters['updateProjectRequestDto'],
        ),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 프로젝트의 이름과 설명을 수정합니다.
   */
  async updateProject(
    requestParameters: UpdateProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.updateProjectRaw(requestParameters, initOverrides);
  }
}
