/* tslint:disable */
/* eslint-disable */
/**
 * Pathos
 * Pathos의 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnnotationHistoryResponseDto,
} from '../models/index';
import {
    AnnotationHistoryResponseDtoFromJSON,
    AnnotationHistoryResponseDtoToJSON,
} from '../models/index';

export interface GetAnnotationHistoryRequest {
    annotationHistoryId: number;
}

export interface UpdateModelNameRequest {
    annotationHistoryId: number;
    name: string;
}

/**
 * 
 */
export class AnnotationHistoryControllerApi extends runtime.BaseAPI {

    /**
     */
    async getAnnotationHistoryRaw(requestParameters: GetAnnotationHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnnotationHistoryResponseDto>> {
        if (requestParameters['annotationHistoryId'] == null) {
            throw new runtime.RequiredError(
                'annotationHistoryId',
                'Required parameter "annotationHistoryId" was null or undefined when calling getAnnotationHistory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/annotation-histories/{annotationHistoryId}`.replace(`{${"annotationHistoryId"}}`, encodeURIComponent(String(requestParameters['annotationHistoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnotationHistoryResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAnnotationHistory(requestParameters: GetAnnotationHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnnotationHistoryResponseDto> {
        const response = await this.getAnnotationHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateModelNameRaw(requestParameters: UpdateModelNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['annotationHistoryId'] == null) {
            throw new runtime.RequiredError(
                'annotationHistoryId',
                'Required parameter "annotationHistoryId" was null or undefined when calling updateModelName().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling updateModelName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/annotation-histories/{annotationHistoryId}/model-name`.replace(`{${"annotationHistoryId"}}`, encodeURIComponent(String(requestParameters['annotationHistoryId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateModelName(requestParameters: UpdateModelNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateModelNameRaw(requestParameters, initOverrides);
    }

}
