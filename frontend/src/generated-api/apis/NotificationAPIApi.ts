/* tslint:disable */
/* eslint-disable */
/**
 * PlanList API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginationResponseGetNotificationsResponseDto,
  SseEmitter,
} from '../models/index';
import {
    PaginationResponseGetNotificationsResponseDtoFromJSON,
    PaginationResponseGetNotificationsResponseDtoToJSON,
    SseEmitterFromJSON,
    SseEmitterToJSON,
} from '../models/index';

export interface GetNotificationsRequest {
    page?: number;
}

export interface ReadNotificationRequest {
    notificationId: number;
}

/**
 * 
 */
export class NotificationAPIApi extends runtime.BaseAPI {

    /**
     * 알림 목록을 조회합니다.
     */
    async getNotificationsRaw(requestParameters: GetNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginationResponseGetNotificationsResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginationResponseGetNotificationsResponseDtoFromJSON(jsonValue));
    }

    /**
     * 알림 목록을 조회합니다.
     */
    async getNotifications(requestParameters: GetNotificationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginationResponseGetNotificationsResponseDto> {
        const response = await this.getNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 알림을 읽은 것으로 처리합니다.
     */
    async readNotificationRaw(requestParameters: ReadNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling readNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/notifications/{notificationId}/read`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters['notificationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 알림을 읽은 것으로 처리합니다.
     */
    async readNotification(requestParameters: ReadNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.readNotificationRaw(requestParameters, initOverrides);
    }

    /**
     * SSE 방식을 위한 알림 구독
     */
    async subscribeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SseEmitter>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/notifications/subscribe`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SseEmitterFromJSON(jsonValue));
    }

    /**
     * SSE 방식을 위한 알림 구독
     */
    async subscribe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SseEmitter> {
        const response = await this.subscribeRaw(initOverrides);
        return await response.value();
    }

}
