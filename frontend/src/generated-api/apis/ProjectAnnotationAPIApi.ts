/* tslint:disable */
/* eslint-disable */
/**
 * Pathos
 * Pathos의 API 명세서입니다.
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AnnotationHistoryResponseDto,
  GetProjectAnnotationResponseDto,
  RoiLabelSaveRequestDto,
  SubProjectResponseDto,
} from '../models/index';
import {
  AnnotationHistoryResponseDtoFromJSON,
  AnnotationHistoryResponseDtoToJSON,
  GetProjectAnnotationResponseDtoFromJSON,
  GetProjectAnnotationResponseDtoToJSON,
  RoiLabelSaveRequestDtoFromJSON,
  RoiLabelSaveRequestDtoToJSON,
  SubProjectResponseDtoFromJSON,
  SubProjectResponseDtoToJSON,
} from '../models/index';

export interface GetAnnotationHistoryRequest {
  annotationHistoryId: number;
}

export interface GetProjectRequest {
  projectId: number;
}

export interface GetSubProjectRequest {
  subProjectId: number;
}

export interface UploadRoisRequest {
  subProjectId: number;
  annotationHistoryId: number;
  requestDto: RoiLabelSaveRequestDto;
  images: Array<Blob>;
}

/**
 *
 */
export class ProjectAnnotationAPIApi extends runtime.BaseAPI {
  /**
   * 특정 Annotation History의 상세 정보를 조회합니다.
   * Annotation History 상세 조회
   */
  async getAnnotationHistoryRaw(
    requestParameters: GetAnnotationHistoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AnnotationHistoryResponseDto>> {
    if (requestParameters['annotationHistoryId'] == null) {
      throw new runtime.RequiredError(
        'annotationHistoryId',
        'Required parameter "annotationHistoryId" was null or undefined when calling getAnnotationHistory().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/annotation/annotation-histories/{annotationHistoryId}`.replace(
          `{${'annotationHistoryId'}}`,
          encodeURIComponent(String(requestParameters['annotationHistoryId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AnnotationHistoryResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 특정 Annotation History의 상세 정보를 조회합니다.
   * Annotation History 상세 조회
   */
  async getAnnotationHistory(
    requestParameters: GetAnnotationHistoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AnnotationHistoryResponseDto> {
    const response = await this.getAnnotationHistoryRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 해당 projectId를 기반으로 프로젝트 단위 정보들과 서브프로젝트들을 반환합니다.
   * 프로젝트 어노테이션 페이지를 조회합니다.
   */
  async getProjectRaw(
    requestParameters: GetProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetProjectAnnotationResponseDto>> {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling getProject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/annotation/projects/{projectId}`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProjectAnnotationResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 해당 projectId를 기반으로 프로젝트 단위 정보들과 서브프로젝트들을 반환합니다.
   * 프로젝트 어노테이션 페이지를 조회합니다.
   */
  async getProject(
    requestParameters: GetProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetProjectAnnotationResponseDto> {
    const response = await this.getProjectRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 서브 프로젝트 ID로 해당 서브 프로젝트의 상세 정보를 조회합니다.
   * 서브 프로젝트 상세 조회
   */
  async getSubProjectRaw(
    requestParameters: GetSubProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SubProjectResponseDto>> {
    if (requestParameters['subProjectId'] == null) {
      throw new runtime.RequiredError(
        'subProjectId',
        'Required parameter "subProjectId" was null or undefined when calling getSubProject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/annotation/sub-projects/{subProjectId}`.replace(
          `{${'subProjectId'}}`,
          encodeURIComponent(String(requestParameters['subProjectId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SubProjectResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   * 서브 프로젝트 ID로 해당 서브 프로젝트의 상세 정보를 조회합니다.
   * 서브 프로젝트 상세 조회
   */
  async getSubProject(
    requestParameters: GetSubProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SubProjectResponseDto> {
    const response = await this.getSubProjectRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 특정 SubProject와 AnnotationHistory에 ROI, 관련 이미지, 라벨 정보를 업로드합니다.
   * ROI, 이미지, 라벨 업로드
   */
  async uploadRoisRaw(
    requestParameters: UploadRoisRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['subProjectId'] == null) {
      throw new runtime.RequiredError(
        'subProjectId',
        'Required parameter "subProjectId" was null or undefined when calling uploadRois().',
      );
    }

    if (requestParameters['annotationHistoryId'] == null) {
      throw new runtime.RequiredError(
        'annotationHistoryId',
        'Required parameter "annotationHistoryId" was null or undefined when calling uploadRois().',
      );
    }

    if (requestParameters['requestDto'] == null) {
      throw new runtime.RequiredError(
        'requestDto',
        'Required parameter "requestDto" was null or undefined when calling uploadRois().',
      );
    }

    if (requestParameters['images'] == null) {
      throw new runtime.RequiredError(
        'images',
        'Required parameter "images" was null or undefined when calling uploadRois().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['requestDto'] != null) {
      formParams.append(
        'requestDto',
        new Blob([JSON.stringify(requestParameters['requestDto'])], {
          type: 'application/json',
        }),
      );
    }

    if (requestParameters['images'] != null) {
      requestParameters['images'].forEach((element) => {
        formParams.append('images', element as any);
      });
    }

    const response = await this.request(
      {
        path: `/api/annotation/sub-projects/{subProjectId}/histories/{annotationHistoryId}/save`
          .replace(
            `{${'subProjectId'}}`,
            encodeURIComponent(String(requestParameters['subProjectId'])),
          )
          .replace(
            `{${'annotationHistoryId'}}`,
            encodeURIComponent(
              String(requestParameters['annotationHistoryId']),
            ),
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 특정 SubProject와 AnnotationHistory에 ROI, 관련 이미지, 라벨 정보를 업로드합니다.
   * ROI, 이미지, 라벨 업로드
   */
  async uploadRois(
    requestParameters: UploadRoisRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.uploadRoisRaw(requestParameters, initOverrides);
  }
}
